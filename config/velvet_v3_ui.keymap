#include "keys_ru.h"
#include <dt-bindings/zmk/input_transform.h>
#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

/ {
    behaviors {
        cap_sen: cap_sen {
            compatible = "zmk,behavior-hold-tap";
            label = "CAP_SEN";
            bindings = <&mo>, <&mkp>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
        };

        hml: home_row_mod_left {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <41 42 43 44 45 30 18 6 7 8 9 10 11 23 22 21 20 19 31 32 33 35 34 6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 41 42 43 44 45>;
        };

        hmr: home_row_mod_right {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38 39 40>;
        };

        mkl: mo_kp_left {
            compatible = "zmk,behavior-hold-tap";
            label = "MO_KP_LEFT";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38 39 40>;
            hold-trigger-on-release;
        };

        mkr: mo_kp_right {
            compatible = "zmk,behavior-hold-tap";
            label = "MO_KP_RIGHT";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 41 42 43 44 45>;
            hold-trigger-on-release;
        };
    };

    combos {
        compatible = "zmk,combos";

        backdel_word {
            bindings = <&kp LC(BACKSPACE)>;
            key-positions = <10 11>;
            layers = <0>;
            timeout-ms = <100>;
        };

        bl_clr_all {
            bindings = <&bt BT_CLR_ALL>;
            key-positions = <44 45>;
            layers = <0 1>;
        };
    };

    macros {
        to_ru: to_ru {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(LC(N2))>;
            label = "TO_RU";
        };

        to_en: to_en {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(LC(N1))>;
            label = "TO_EN";
        };

        layer_en: layer_en {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&to 0 &to_en>;
            label = "LAYER_EN";
        };

        layer_ru: layer_ru {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&to 2 &to_ru>;
            label = "LAYER_RU";
        };

        en: en {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings =
                <&to_en &macro_param_1to1 &kp MACRO_PLACEHOLDER>,
                <&macro_wait_time 10>,
                <&to_ru>,
                <&macro_wait_time 10>;

            label = "EN";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        Base_EN {
            bindings = <
&kp ESC  &kp Q              &kp W            &kp E            &kp R                &kp T                           &kp Y  &kp U                 &kp I             &kp O             &kp P                  &kp BSPC
&kp TAB  &hml LEFT_SHIFT A  &hml LEFT_WIN S  &hml LEFT_ALT D  &hml LEFT_CONTROL F  &kp G                           &kp H  &hmr RIGHT_CONTROL J  &hmr RIGHT_ALT K  &hmr RIGHT_WIN L  &hmr RIGHT_SHIFT SEMI  &kp SINGLE_QUOTE
&trans   &kp Z              &kp X            &kp C            &kp V                &kp B                           &kp N  &kp M                 &kp COMMA         &kp DOT           &kp SLASH              &kp LBKT
                            &trans           &trans           &mo 5                &mo 2  &mkl 9 SPACE    &kp RET  &mo 3  &mo 6                 &kp PRINTSCREEN   &none
            >;

            label = "base_en";
        };

        Base_RU {
            label = "base_ru";
            bindings = <
&kp ESC  &kp RU_CYRILLIC_SHORT_I         &kp RU_CYRILLIC_TSE             &kp RU_CYRILLIC_U             &kp RU_CYRILLIC_KA               &kp RU_CYRILLIC_IE                           &kp RU_CYRILLIC_EN  &kp RU_CYRILLIC_GHE               &kp RU_CYRILLIC_SHA            &kp RU_CYRILLIC_SHCHA          &kp RU_CYRILLIC_ZE                &kp BSPC
&kp TAB  &hml LEFT_SHIFT RU_CYRILLIC_EF  &hml LEFT_WIN RU_CYRILLIC_YERU  &hml LEFT_ALT RU_CYRILLIC_VE  &hml LEFT_CONTROL RU_CYRILLIC_A  &kp RU_CYRILLIC_PE                           &kp RU_CYRILLIC_ER  &hmr RIGHT_CONTROL RU_CYRILLIC_O  &hmr RIGHT_ALT RU_CYRILLIC_EL  &hmr RIGHT_WIN RU_CYRILLIC_DE  &hmr RIGHT_SHIFT RU_CYRILLIC_ZHE  &kp RU_CYRILLIC_E
&trans   &kp RU_CYRILLIC_YA              &kp RU_CYRILLIC_CHE             &kp RU_CYRILLIC_ES            &kp RU_CYRILLIC_EM               &kp RU_CYRILLIC_I                            &kp RU_CYRILLIC_TE  &kp RU_CYRILLIC_SOFT_SIGN         &kp RU_CYRILLIC_BE             &kp RU_CYRILLIC_YU             &kp DOT                           &kp RU_CYRILLIC_HA
                                         &trans                          &trans                        &mo 5                            &mo 2               &mkl 9 SPACE    &kp RET  &mo 4               &mo 6                             &kp PRINTSCREEN                &none
            >;
        };

        Navigation {
            bindings = <
&trans         &trans     &kp HOME      &kp UP    &kp END        &kp GRAVE                    &trans  &trans  &trans  &trans  &trans  &trans
&kp PAGE_UP    &layer_en  &kp LEFT      &kp DOWN  &kp RIGHT      &kp RET                      &trans  &trans  &trans  &trans  &trans  &trans
&kp PAGE_DOWN  &layer_ru  &kp LC(LEFT)  &kp CLCK  &kp LC(RIGHT)  &kp DEL                      &trans  &trans  &trans  &trans  &trans  &trans
                          &trans        &trans    &trans         &trans     &trans    &trans  &mo 5   &trans  &trans  &trans
            >;

            label = "Navigation";
        };

        Sym_EN {
            bindings = <
&trans  &trans   &kp LT    &kp EQUAL  &kp GT     &kp GRAVE                       &kp DLLR   &kp LBKT  &kp UNDER  &kp RBKT  &kp FSLH         &kp BSPC
&trans  &kp DQT  &kp LPAR  &kp MINUS  &kp RPAR   &kp PLUS                        &kp PRCNT  &kp LBRC  &kp SEMI   &kp RBRC  &kp EXCL         &trans
&trans  &kp SQT  &kp STAR  &kp SEMI   &kp QMARK  &kp HASH                        &kp AT     &kp RBRC  &kp COLON  &kp AMPS  &kp NON_US_BSLH  &trans
                 &trans    &trans     &trans     &trans     &kp SPACE    &trans  &trans     &trans    &trans     &trans
            >;

            label = " EN";
        };

        Sym_RU {
            label = "RU";
            bindings = <
&trans  &trans   &en LT    &en EQUAL  &en GT     &en GRAVE                       &en DLLR   &en LBKT  &en UNDER  &en RBKT  &en FSLH         &kp BSPC
&trans  &en DQT  &en LPAR  &en MINUS  &en RPAR   &en PLUS                        &en PRCNT  &en LBRC  &en SEMI   &en RBRC  &en EXCL         &trans
&trans  &en SQT  &en STAR  &en SEMI   &en QMARK  &en HASH                        &en AT     &en RBRC  &en COLON  &en AMPS  &en NON_US_BSLH  &trans
                 &trans    &trans     &trans     &trans     &kp SPACE    &trans  &trans     &trans    &trans     &trans
            >;
        };

        Numbers {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                          &trans  &trans            &trans        &trans        &trans          &kp BACKSPACE
&trans  &kp N1  &kp N2  &kp N3  &kp N4  &kp N5                          &trans  &kp LEFT_CONTROL  &kp LEFT_ALT  &kp LEFT_WIN  &kp LEFT_SHIFT  &trans
&trans  &kp N6  &kp N7  &kp N8  &kp N9  &kp N0                          &trans  &trans            &trans        &trans        &trans          &trans
                &trans  &trans  &trans  &trans  &kp SPACE    &kp ENTER  &trans  &trans            &trans        &trans
            >;

            label = "Numbers";
        };

        Mouse {
            bindings = <
&trans  &trans  &trans    &trans    &trans    &trans                    &trans  &trans    &trans    &trans    &trans  &trans
&trans  &mo 7   &mkp MB3  &mkp MB2  &mkp MB1  &mo 8                     &mo 8   &mkp MB1  &mkp MB2  &mkp MB3  &mo 7   &trans
&trans  &trans  &trans    &trans    &trans    &trans                    &trans  &trans    &trans    &trans    &trans  &trans
                &trans    &trans    &trans    &trans  &trans    &trans  &trans  &trans    &trans    &trans
            >;
        };

        Scroll {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans  &trans
                &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
            >;
        };

        Sniper {
            bindings = <
&trans  &trans  &trans    &trans    &trans    &trans                    &trans  &trans    &trans    &trans    &trans  &trans
&trans  &trans  &mkp MB3  &mkp MB2  &mkp MB1  &trans                    &trans  &mkp MB1  &mkp MB2  &mkp MB3  &trans  &trans
&trans  &trans  &trans    &trans    &trans    &trans                    &trans  &trans    &trans    &trans    &trans  &trans
                &trans    &trans    &trans    &trans  &trans    &trans  &trans  &trans    &trans    &trans
            >;
        };

        Functional {
            bindings = <
&trans  &trans  &trans  &trans   &trans   &trans                     &bt BT_CLR_ALL  &trans  &trans  &trans  &trans  &trans
&kp F1  &kp F2  &kp F3  &kp F4   &kp F5   &kp F6                     &trans          &trans  &trans  &trans  &trans  &trans
&kp F7  &kp F8  &kp F9  &kp F10  &kp F11  &kp F12                    &trans          &trans  &trans  &trans  &trans  &trans
                &trans  &trans   &trans   &trans   &trans    &trans  &trans          &trans  &trans  &trans
            >;

            label = "Functional";
        };
    };
};

&trackball_listener {
    input-processors = <&zip_xy_scaler 9 20>;

    scroller {
        layers = <5>;
        input-processors =
            <&zip_xy_transform (INPUT_TRANSFORM_Y_INVERT | INPUT_TRANSFORM_X_INVERT )>,
            <&zip_xy_scaler 1 32>,
            <&zip_xy_to_scroll_mapper>;
    };

    sniper {
        layers = <6>;
        input-processors = <&zip_xy_scaler 1 4>;
    };
};
