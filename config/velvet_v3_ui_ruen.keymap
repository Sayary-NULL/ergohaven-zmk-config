#include "keys_ru.h"
#include <dt-bindings/zmk/input_transform.h>
#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

/ {
    behaviors {
        cap_sen: cap_sen {
            compatible = "zmk,behavior-hold-tap";
            label = "CAP_SEN";
            bindings = <&mo>, <&mkp>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
            hold-while-undecided;
        };

        hml: home_row_mod_left {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <41 42 43 44 45 30 18 6 7 8 9 10 11 23 22 21 20 19 31 32 33 35 34 6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 41 42 43 44 45>;
        };

        hmr: home_row_mod_right {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38 39 40>;
        };

        mouse_mode: mouse_mode {
            compatible = "zmk,behavior-hold-tap";
            label = "MM";
            bindings = <&mo>, <&tog>;

            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            hold-trigger-on-release;
        };
    };

    combos {
        compatible = "zmk,combos";

        cmben {
            bindings = <&layer_en>;
            key-positions = <3 4>;
            layers = <1>;
        };

        cmbru {
            bindings = <&layer_ru>;
            key-positions = <3 4>;
            layers = <0>;
        };

        backdel_word {
            bindings = <&kp LC(BACKSPACE)>;
            key-positions = <10 11>;
            layers = <0 1>;
            timeout-ms = <100>;
        };

        cleart_all_bt {
            bindings = <&sl 11>;
            key-positions = <44 45>;
            layers = <0 1>;
        };
    };

    macros {
        to_ru: to_ru {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(LC(N2))>;
            label = "TO_RU";
        };

        to_en: to_en {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(LC(N1))>;
            label = "TO_EN";
        };

        layer_en: layer_en {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&to 0 &to_en>;
            label = "LAYER_EN";
        };

        layer_ru: layer_ru {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&to 1 &to_ru>;
            label = "LAYER_RU";
        };

        en: en {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings =
                <&to_en &macro_param_1to1 &kp MACRO_PLACEHOLDER>,
                <&macro_wait_time 10>,
                <&to_ru>,
                <&macro_wait_time 10>;

            label = "EN";
        };

        so_program: so_program {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&kp LEFT_SHIFT &kp LEFT_CONTROL &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "SO_PROGRAM";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        en {
            bindings = <
&kp ESC  &kp Q              &kp W            &kp E            &kp R                &kp T                          &kp Y  &kp U                 &kp I            &kp O             &kp P                  &kp BSPC
&kp TAB  &hml LEFT_SHIFT A  &hml LEFT_WIN S  &hml LEFT_ALT D  &hml LEFT_CONTROL F  &kp G                          &kp H  &hmr RIGHT_CONTROL J  &hmr LEFT_ALT K  &hmr RIGHT_WIN L  &hmr RIGHT_SHIFT SEMI  &kp SINGLE_QUOTE
&none    &kp Z              &kp X            &kp C            &kp V                &kp B                          &kp N  &kp M                 &kp COMMA        &kp DOT           &kp SLASH              &kp LBKT
                            &none            &none            &mo 5                &mo 2  &lt 9 SPACE    &kp RET  &mo 3  &mo 6                 &kp PRINTSCREEN  &none
            >;

            display-name = "en";
        };

        ru {
            display-name = "ru";
            bindings = <
&kp ESC  &kp RU_CYRILLIC_SHORT_I         &kp RU_CYRILLIC_TSE             &kp RU_CYRILLIC_U             &kp RU_CYRILLIC_KA               &kp RU_CYRILLIC_IE                          &kp RU_CYRILLIC_EN  &kp RU_CYRILLIC_GHE               &kp RU_CYRILLIC_SHA           &kp RU_CYRILLIC_SHCHA          &kp RU_CYRILLIC_ZE                &kp BSPC
&kp TAB  &hml LEFT_SHIFT RU_CYRILLIC_EF  &hml LEFT_WIN RU_CYRILLIC_YERU  &hml LEFT_ALT RU_CYRILLIC_VE  &hml LEFT_CONTROL RU_CYRILLIC_A  &kp RU_CYRILLIC_PE                          &kp RU_CYRILLIC_ER  &hmr RIGHT_CONTROL RU_CYRILLIC_O  &hmr LEFT_ALT RU_CYRILLIC_EL  &hmr RIGHT_WIN RU_CYRILLIC_DE  &hmr RIGHT_SHIFT RU_CYRILLIC_ZHE  &kp RU_CYRILLIC_E
&none    &kp RU_CYRILLIC_YA              &kp RU_CYRILLIC_CHE             &kp RU_CYRILLIC_ES            &kp RU_CYRILLIC_EM               &kp RU_CYRILLIC_I                           &kp RU_CYRILLIC_TE  &kp RU_CYRILLIC_SOFT_SIGN         &kp RU_CYRILLIC_BE            &kp RU_CYRILLIC_YU             &kp RU_DOT                        &kp RU_CYRILLIC_HA
                                         &none                           &none                         &mo 5                            &mo 2               &lt 9 SPACE    &kp RET  &mo 4               &mo 6                             &kp PRINTSCREEN               &none
            >;
        };

        nav {
            bindings = <
&none          &none      &kp HOME      &kp UP    &kp END        &kp GRAVE                  &none   &none          &none          &none  &none  &none
&kp PAGE_UP    &layer_en  &kp LEFT      &kp DOWN  &kp RIGHT      &kp RET                    &none   &kp LC(MINUS)  &kp LC(EQUAL)  &none  &none  &none
&kp PAGE_DOWN  &layer_ru  &kp LC(LEFT)  &kp CLCK  &kp LC(RIGHT)  &kp DEL                    &none   &none          &none          &none  &none  &none
                          &none         &none     &none          &none      &none    &none  &mo 10  &none          &none          &none
            >;

            display-name = "nav";
        };

        sym {
            bindings = <
&none  &kp RU_NUMERO  &kp LT    &kp EQUAL  &kp GT     &kp GRAVE                          &kp DLLR   &kp LBKT  &kp UNDER  &kp RBKT  &kp FSLH         &kp BSPC
&none  &kp DQT        &kp LPAR  &kp MINUS  &kp RPAR   &kp PLUS                           &kp PRCNT  &kp LBRC  &kp TILDE  &kp RBRC  &kp EXCL         &none
&none  &kp SQT        &kp STAR  &kp COLON  &kp QMARK  &kp HASH                           &kp AT     &kp RBRC  &kp SEMI   &kp AMPS  &kp NON_US_BSLH  &none
                      &none     &none      &none      &mo 10     &kp SPACE    &kp ENTER  &none      &none     &none      &none
            >;

            display-name = "sym";
        };

        sym_ru {
            display-name = "sym_ru";
            bindings = <
&none  &kp RU_NUMERO      &en LT    &kp EQUAL  &en GT        &en GRAVE                          &en DOLLAR  &en LEFT_BRACKET           &kp UNDER  &en RIGHT_BRACKET  &en FSLH  &kp BACKSPACE
&none  &en DOUBLE_QUOTES  &kp LPAR  &kp MINUS  &kp RPAR      &kp PLUS                           &kp PRCNT   &en LBRC                   &en TILDE  &en RBRC           &kp EXCL  &none
&none  &en SINGLE_QUOTE   &kp STAR  &en COLON  &en QUESTION  &en HASH                           &en AT      &kp RU_CYRILLIC_HARD_SIGN  &en SEMI   &en AMPS           &kp NUBS  &none
                          &none     &none      &none         &mo 10     &kp SPACE    &kp ENTER  &none       &none                      &none      &none
            >;
        };

        Numbers {
            bindings = <
&none  &none   &none   &none   &none   &none                           &none  &none             &none         &none         &none           &kp BACKSPACE
&none  &kp N1  &kp N2  &kp N3  &kp N4  &kp N5                          &none  &kp LEFT_CONTROL  &kp LEFT_ALT  &kp LEFT_WIN  &kp LEFT_SHIFT  &none
&none  &kp N6  &kp N7  &kp N8  &kp N9  &kp N0                          &none  &none             &none         &none         &none           &none
               &none   &none   &none   &none   &kp SPACE    &kp ENTER  &none  &none             &none         &none
            >;

            display-name = "Numbers";
        };

        mouse {
            bindings = <
&none  &none            &none     &none      &none      &none                  &none  &none     &none     &none     &none            &none
&none  &mouse_mode 7 7  &mkp MB3  &mkp MB2   &mkp MB1   &mo 8                  &mo 8  &mkp MB1  &mkp MB2  &mkp MB3  &mouse_mode 7 7  &none
&none  &none            &none     &kp LC(C)  &kp LC(V)  &none                  &none  &none     &none     &none     &none            &none
                        &none     &none      &none      &none  &none    &none  &none  &none     &none     &none
            >;
        };

        scroll {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans  &trans
                &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
            >;
        };

        sniper {
            bindings = <
&trans  &trans  &trans    &trans    &trans    &trans                    &trans  &trans    &trans    &trans    &trans  &trans
&trans  &trans  &mkp MB3  &mkp MB2  &mkp MB1  &trans                    &trans  &mkp MB1  &mkp MB2  &mkp MB3  &trans  &trans
&trans  &trans  &trans    &trans    &trans    &trans                    &trans  &trans    &trans    &trans    &trans  &trans
                &trans    &trans    &trans    &trans  &trans    &trans  &trans  &trans    &trans    &trans
            >;
        };

        Functional {
            bindings = <
&none   &none   &none   &none    &none    &none                    &none  &none  &none  &none  &none  &none
&kp F1  &kp F2  &kp F3  &kp F4   &kp F5   &kp F6                   &none  &none  &none  &none  &none  &none
&kp F7  &kp F8  &kp F9  &kp F10  &kp F11  &kp F12                  &none  &none  &none  &none  &none  &none
                &none   &none    &none    &none    &none    &none  &none  &none  &none  &none
            >;

            label = "Functional";
        };

        PO {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans  &trans
                &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
            >;

            label = "program";
        };

        BLT {
            bindings = <
&none  &none  &none  &none  &none  &none                  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &none
&none  &none  &none  &none  &none  &none                  &none         &none         &none         &none         &none         &none
&none  &none  &none  &none  &none  &none                  &bt BT_CLR    &none         &none         &none         &none         &bt BT_CLR_ALL
              &none  &none  &none  &none  &none    &none  &none         &none         &none         &none
            >;
        };
    };
};

&trackball_listener {
    input-processors = <&zip_xy_scaler 9 20>;

    scroller {
        layers = <7>;
        input-processors =
            <&zip_xy_transform INPUT_TRANSFORM_Y_INVERT>,
            <&zip_xy_scaler 1 32>,
            <&zip_xy_to_scroll_mapper>;
    };

    sniper {
        layers = <8>;
        input-processors = <&zip_xy_scaler 1 4>;
    };
};
